#include<vector>
#include<unordered_set>
#include<algorithm>
#include<climits>

using namespace std;

class DSU {
public:
    vector<int> par;
    vector<int> size;

    DSU(int n) {
        size.resize(n, 1);
        par.resize(n);
        for (int i = 0; i < n; i++)
            par[i] = i;
    }

    int find(int u) {
        if (par[u] == u)
            return u;
        return par[u] = find(par[u]);
    }

    void join(int u, int v) {
        int pu = find(u);
        int pv = find(v);
        if (pu == pv)
            return;
        if (size[pu] > size[pv]) {
            par[pv] = pu;
            size[pu] += size[pv];
        } else {
            par[pu] = pv;
            size[pv] += size[pu];
        }
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial) {
        int n = graph.size();
        int m = initial.size();
        DSU ds(n);
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                if (graph[i][j]) ds.join(i, j);

        sort(initial.begin(), initial.end());

        unordered_set<int> filteredParents;
        unordered_set<int> deletedParents;
        for (int i = 0; i < m; i++) {
            int par = ds.find(initial[i]);
            if (filteredParents.find(par) == filteredParents.end()) {
                filteredParents.insert(par);
            } else {
                deletedParents.insert(par);
            }
        }

        int maxInf = 0;
        int idx = INT_MAX;
        for (int i = 0; i < m; i++) {
            int node = initial[i];
            int par = ds.find(node);
            if (deletedParents.find(par) != deletedParents.end()) continue;
            if (ds.size[par] > maxInf) {
                maxInf = ds.size[par];
                idx = node;
            }
        }
        return idx == INT_MAX ? initial[0] : idx;
    }
};